# Following testing rule works
# - alias: 'Random sensor trigger twitter'
#   trigger:
#     platform: state
#     entity_id: binary_sensor.random_change
#     to: "on"
#   action:
#     service: notify.twitter_wang3an
#     data:
#       message:
#     data_template:
#       message: >
#         Auto tweet : Random value {{ states.sensor.random_1.state }} is less than 50.  

- alias: 'Daily modem power off at 5:50'
  trigger:
    platform: time
    at: '05:50:00'
  action:
    service: switch.turn_off
    entity_id: switch.modem_xiaomi_mi_wifi_socket_basic
- alias: 'Daily modem power on at 5:53'
  trigger:
    platform: time
    at: '05:53:00'
  action:
    service: switch.turn_on
    entity_id: switch.modem_xiaomi_mi_wifi_socket_basic

# - alias: 'Daily orvibo power on at 6:00'
#   trigger:
#     platform: time
#     at: '06:00:00'
#   action:
#     service: switch.turn_on
#     entity_id: switch.orange_orvibo_wifi_socket
# - alias: 'Daily orvibo power off at 7:00'
#   trigger:
#     platform: time
#     at: '07:00:00'
#   action:
#     service: switch.turn_off
#     entity_id: switch.orange_orvibo_wifi_socket

- alias: 'TTS on finished cleaning'
  trigger:
    platform: state
    entity_id: vacuum.cleaner_xiaomi_cleaner_robot
    from: 'on'
    to: 'off'
  action:
    service: tts.google_say
    entity_id: media_player.living_room_home
    data:
      # message: !include tts-cleaner-robot-job-done.yaml # this mode won't work
      message: "Human, my cleaner robot had just finished cleaning."

- alias: 'Living room TV power on when Chromecast playing'
  trigger:
    - platform: state
      entity_id: media_player.living_room_chromecast
      from: 'off'
      to: 'idle'
    - platform: state
      entity_id: media_player.living_room_chromecast
      from: 'off'
      to: 'playing'
  condition:
    condition: state
    entity_id: binary_sensor.skyworth_tv
    state: 'off' # not detected
  action:
    - service: media_player.media_pause # waiting for tv power on
      entity_id: media_player.living_room_chromecast
    - service: switch.turn_on
      entity_id: switch.tv
    - delay: '00:00:30' # left some seconds for tv power on
    - service: media_player.media_play # continue playing
      entity_id: media_player.living_room_chromecast

- alias: "TTS on work event: ended" # by google event
  trigger:
    platform: state
    entity_id: calendar.start_work
    to: 'off' # work event ended
  action:
    - service: tts.google_say
      entity_id: media_player.living_room_home
      data:
        message: "Time to take a walk, human!"
    - service: switch.turn_on # set the signal on
      entity_id: switch.orange_orvibo_wifi_socket
    - service: timer.start # start the timer for repeat
      entity_id: timer.flag_tts_repeat_take_a_walk

- alias: "TTS on work event: repeat after ended"
  trigger:
    platform: state
    entity_id: timer.flag_tts_repeat_take_a_walk
    to: 'idle' # time up
  condition:
    condition: state
    entity_id: switch.orange_orvibo_wifi_socket
    state: 'on' # repeat if signal is on
  action:
    - service: tts.google_say
      entity_id: media_player.living_room_home
      data:
        # message: "Time to take a walk, human!"
        message: "喂！够了够了，必须站起来走走了！"
        language: "zh"
    - service: timer.start # start this timer again
      entity_id: timer.flag_tts_repeat_take_a_walk
# end : automation for "stop working, take a walk"
################################################################

################################################################
# TTS now time by google home
- alias: "TTS on time: Magic Cube free fall" 
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: free_fall
  action:
    - service: tts.google_say
      entity_id: media_player.living_room_home
      data_template:
        message: >
          Time now: {{ now().strftime('%-I:%M %P') }}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_google_home_tts_activated
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_google_home_tts_activated

- alias: "TTS on time volume: Magic Cube rotate"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_google_home_tts_activated
    state: 'active' # repeat if signal is on
  action:
    - service_template: >
        {% if trigger.event.data.action_value > 0 %}
            media_player.volume_up
        {% else %}
            media_player.volume_down
        {% endif %}
      entity_id: media_player.living_room_home
    - service: timer.cancel # restart timer
      entity_id: timer.flag_google_home_tts_activated
    - service: timer.start
      entity_id: timer.flag_google_home_tts_activated

################################################################

- alias: "Living room light off: Magic Cube shake air"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: shake_air
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.living_room_light_xiaomi_philips_ball

- alias: "Living room light on: Magic Cube shake air"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: shake_air
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_living_room_light_activated

- alias: "Living room light brightness: Magic Cube rotate"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_living_room_light_activated
    state: 'active' # repeat if signal is on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        # set brightness by rotation value, can not be 0?
        brightness: >
          {% if states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 0 %}
            2
          {% elif states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 255 %}
            {{states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4}}
          {% else %}
            255
          {% endif %}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_living_room_light_activated
    - service: timer.start
      entity_id: timer.flag_living_room_light_activated

################################################################

- alias: "Small bed room light off: Magic Cube flip90"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: flip90
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.small_bedroom_light_xiaomi_philips_ball

- alias: "Small bed room light on: Magic Cube flip90"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: flip90
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_small_bedroom_light_activated

- alias: "Small bed room light brightness: Magic Cube rotate"
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: binary_sensor.cube_158d000103a704
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_small_bedroom_light_activated
    state: 'active' # repeat if signal is on
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        brightness: >
          {% if states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 0 %}
            2
          {% elif states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 255 %}
            {{states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4}}
          {% else %}
            255
          {% endif %}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_small_bedroom_light_activated
    - service: timer.start
      entity_id: timer.flag_small_bedroom_light_activated

################################################################

- alias: "Living room light off: Motion Sensor 2"
  trigger:
    - platform: event
      event_type: motion
      event_data:
        entity_id: binary_sensor.motion_sensor_158d0001db5021
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.living_room_light_xiaomi_philips_ball

- alias: "Living room light on: Motion Sensor 2"
  trigger:
    - platform: event
      event_type: motion
      event_data:
        entity_id: binary_sensor.motion_sensor_158d0001db5021
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_living_room_light_activated

################################################################
# fade light on in morning
- alias: "Fade light on in working days morning (start)"
  trigger:
      platform: time
      at: '06:20:00'
  condition:
    condition: time
    weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
  action:
    # - service: light.turn_on
    #   entity_id: light.small_bedroom_light_xiaomi_philips_ball
    # - delay: '00:00:04' # delay for the light to response
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      data: 
        brightness: 5 # turn on light with minimum brightness
    # - delay: '00:00:04' # delay for the light to response
    - service: automation.turn_on # turn on a per second triggered rule
      entity_id: automation.fade_light_on_in_working_days_morning_increasing

- alias: "Fade light on in working days morning (increasing)"
  initial_state: false
  # hide_entity: true
  trigger:
      platform: time
      seconds: '/12' # every 4 seconds, 1 second is too short for light to response
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        # brightness step must >= 5?
        brightness: >
          {% if states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + 5 < 255 %}
            {{states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + 5}}
          {% else %}
            255
          {% endif %}

- alias: "Fade light on in working days morning (stop)"
  trigger:
      platform: time
      at: '06:30:00'
  action:
    - service: automation.turn_off
      entity_id: automation.fade_light_on_in_working_days_morning_increasing
################################################################
- alias: "TTS on Air Quality Index"
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.test 
      to: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.aqi_checker
    - service: input_boolean.turn_off
      entity_id: input_boolean.test
    - service: tts.google_say
      entity_id: media_player.living_room_home
      data_template: 
        message: >
            AQI now: {{states.sensor.waqi_zhuhai.state}}
    
################################################################
# test begin
# - alias: "test on ON"
#   trigger:
#     - platform: state
#       entity_id: input_boolean.test
#       to: 'on'
#   action:
#     - service: xiaomi_aqara.play_ringtone
#       data:
#         gw_mac: !secret xiaomi_gateway_mac
#         ringtone_id: 8
#         ringtone_vol: 8

# - alias: "test on OFF"
#   trigger:
#     - platform: state
#       entity_id: input_boolean.test
#       to: 'off'
#   action:
#     - service: xiaomi_aqara.stop_ringtone
#       data:
#         gw_mac: !secret xiaomi_gateway_mac

- alias: "test on sensor turn bool on"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001db5021
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.test
    state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.test
    # - service: xiaomi_aqara.play_ringtone
    #   data:
    #     gw_mac: !secret xiaomi_gateway_mac
    #     ringtone_id: 8
    #     ringtone_vol: 3

- alias: "test on sensor turn bool off"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d0001db5021
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.test
    state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.test
    # - service: xiaomi_aqara.stop_ringtone
    #   data:
    #     gw_mac: !secret xiaomi_gateway_mac
# test end
################################################################

