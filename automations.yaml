# Following testing rule works
# - alias: 'Random sensor trigger twitter'
#   trigger:
#     platform: state
#     entity_id: binary_sensor.random_change
#     to: "on"
#   action:
#     service: notify.twitter_wang3an
#     data:
#       message:
#     data_template:
#       message: >
#         Auto tweet : Random value {{ states.sensor.random_1.state }} is less than 50.  

################################################################
# begin
- alias: 'Daily modem power daily off on'
  hide_entity: true
  trigger:
    platform: time
    at: '05:00:00'
  action:
    - service: switch.turn_off
      entity_id: switch.modem
    - delay: '00:15:00'
    - service: switch.turn_on
      entity_id: switch.modem
- alias: 'Daily modem power daily on'
  hide_entity: true
  trigger:
    platform: time
    at: '05:15:00'
  action:
    service: switch.turn_on
    entity_id: switch.modem
# end
################################################################

- alias: 'TTS on finished cleaning'
  hide_entity: true
  trigger:
    platform: state
    entity_id: vacuum.cleaner_xiaomi_cleaner_robot
    from: 'on'
    to: 'off'
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        # message: !include tts-cleaner-robot-job-done.yaml # this mode won't work
        message: "Human, my cleaner robot had just finished cleaning."

################################################################
# begin : automation for TV power on when Chromecast playing
- alias: 'Living room TV power on when Chromecast playing'
  hide_entity: true
  trigger:
    - platform: state
      entity_id: media_player.living_room_chromecast
      from: 'off'
      to: 'idle'
    - platform: state
      entity_id: media_player.living_room_chromecast
      from: 'off'
      to: 'playing'
  condition:
    condition: state
    entity_id: binary_sensor.skyworth_tv
    state: 'off' # not detected
  action:
    - service: media_player.media_pause # waiting for tv power on
      entity_id: media_player.living_room_chromecast
    - service: switch.turn_on
      entity_id: switch.tv
    - delay: '00:00:30' # left some seconds for tv power on
    - service: media_player.media_play # continue playing
      entity_id: media_player.living_room_chromecast

- alias: 'Chromecast stop when Living room TV power off'
  hide_entity: true
  trigger:
    - platform: state
      entity_id: binary_sensor.skyworth_tv
      to: 'off'
  action:
    - service: media_player.media_stop # waiting for tv power on
      entity_id: media_player.living_room_chromecast


################################################################
# begin : automation for "stop working, take a walk"
- alias: "Set working timer: trigger set flag up by button"
  #hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_2_id
      click_type: single
  condition:
    condition: and
    conditions:
    - condition: numeric_state
      entity_id: input_number.start_work_timer
      below: 1 # less than 1 means no working timer now
    - condition: state
      entity_id: automation.tts_for_take_a_walk_repeating
      state: 'off' # only set a timer while there is not a repeating tts current
  action:
    - service: input_boolean.turn_on # set flag up
      entity_id: input_boolean.start_work

- alias: "Set working timer: report"
  #hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_2_id
      click_type: single
  condition:
    condition: and
    conditions:
    - condition: numeric_state
      entity_id: input_number.start_work_timer
      above: 0 # greater than 0 means there is a working timer now
    - condition: state
      entity_id: automation.tts_for_take_a_walk_repeating
      state: 'off' # only set a timer while there is not a repeating tts current
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data_template: # only prompt when counting
        message: >
          The current timer is started {{states.input_number.start_work_timer.state | int}} minutes ago.

- alias: "Set working timer: trigger put flag down by button"
  #hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_2_id
      click_type: double
  condition:
    condition: and
    conditions:
    - condition: numeric_state
      entity_id: input_number.start_work_timer
      above: 0 # greater than 0 means there is a working timer now
    - condition: state
      entity_id: automation.tts_for_take_a_walk_repeating
      state: 'off' # only set a timer while there is not a repeating tts current
  action:
    - service: input_boolean.turn_off # set flag up
      entity_id: input_boolean.start_work
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data_template: # only prompt when counting
        message: >
          The current timer is canceled.

# motion trigger is not practical useful
# - alias: "Set working timer: trigger set flag up by motion"
#   #hide_entity: true
#   trigger:
#     - platform: event
#       event_type: motion
#       event_data:
#         entity_id: !secret motion_sensor_1_id
#   condition:
#     condition: and
#     conditions:
#     - condition: numeric_state
#       entity_id: input_number.start_work_timer
#       below: 1 # less than 1 means no working timer now
#     - condition: state
#       entity_id: automation.tts_for_take_a_walk_repeating
#       state: 'off' # only set a timer while there is not a repeating tts current
#   action:
#     - service: input_boolean.turn_on # set flag up
#       entity_id: input_boolean.start_work

- alias: "Set working timer: trun on"
  initial_state: true
  #hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.start_work
      to: 'on'
  condition:
    condition: and
    conditions:
    - condition: numeric_state
      entity_id: input_number.start_work_timer
      below: 1 # less than 1 means no working timer now
    - condition: state
      entity_id: automation.tts_for_take_a_walk_repeating
      state: 'off' # no repeating tts means no working timer now
  action:
    - service: input_number.set_value
      data:
        entity_id: input_number.start_work_timer
        value: 1 # inital start value
    - service: automation.turn_on # start counting
      entity_id: automation.set_working_timer_counting
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        message: "A start work timer is started!"

- alias: "Set working timer: resume on start"
  initial_state: true
  #hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    condition: numeric_state
    entity_id: input_number.start_work_timer
    above: 0 # greater than 0 means it is a time need to resume
  action:
    - service: input_boolean.turn_on # set flag up
      entity_id: input_boolean.start_work
    - service: automation.turn_on # resuming by start counting
      entity_id: automation.set_working_timer_counting
    - service: automation.turn_on # prompt
      entity_id: automation.set_working_timer_resuming_prompt


- alias: "Set working timer: time up"
  initial_state: true
  #hide_entity: true
  trigger:
    - platform: numeric_state
      entity_id: input_number.start_work_timer
      above: 45 # 45 minuts passed
  action:
    - service: automation.trigger # voice notification triggered
      entity_id: automation.tts_for_take_a_walk_work_event_just_ended
    - service: input_boolean.turn_off # put flag down
      entity_id: input_boolean.start_work

- alias: "Set working timer: turn off"
  initial_state: true
  #hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.start_work
      to: 'off'  
  action:
    - service: automation.turn_off # stop counting
      entity_id: automation.set_working_timer_counting
    - service: input_number.set_value
      data:
        entity_id: input_number.start_work_timer
        value: 0 # initial stop value

- alias: "Set working timer: counting"
  initial_state: false
  #hide_entity: true
  trigger:
    - platform: time
      minutes: '/1' # every 1 minutes
      seconds: 00
  action:
    - service: input_number.increment # increase the timer counter
      entity_id: input_number.start_work_timer

- alias: "Set working timer: resuming prompt"
  initial_state: false
  #hide_entity: true
  trigger:
    - platform: time
      minutes: '/2' # prompt after 2 minutes resuming (on hass start)
      seconds: '00' 
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data_template: # only prompt when counting
        message: >
          {% if is_state('automation.set_working_timer_counting', 'on') %}
            Resuming the start work timer from {{states.input_number.start_work_timer.state | int}} minutes.
          {% else %}
            ''
          {% endif %}
    - service: automation.turn_off # stop self
      entity_id: automation.set_working_timer_resuming_prompt
# end: Set working timer

- alias: "TTS for take a walk: work event just ended" # triggered by google event
  #hide_entity: true
  trigger:
    platform: state
    entity_id: calendar.start_work
    to: 'off' # work event ended
  action:
    - service: automation.turn_on # turn on a timer drived rule for tts
      entity_id: automation.tts_for_take_a_walk_repeating
    - service: light.turn_on # turn on the TTS signal
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:15" # left some time for signal on
    - service: automation.turn_on # start rule for turn off signal in next x seconds then turn off itself
      entity_id: automation.tts_repeat_signal_on_for_x_seconds
    - service: automation.turn_on # turn on a checker rule to check the signal
      entity_id: automation.tts_for_take_a_walk_check_signal_to_stop_repeating

- alias: "TTS for take a walk: repeating"
  #hide_entity: true
  initial_state: false
  trigger:
      platform: time
      seconds: '/10' # every x seconds, shouldn't too short for the light and TTS to response
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        message: "Time to take a walk, human!"
    - delay: "00:00:05" # left some time for tts
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        # message: "Time to take a walk, human!"
        message: "喂！够了够了，必须站起来走走了！"
        language: "zh"
    - delay: "00:00:05" # left some time for tts

- alias: "TTS for take a walk: check signal to stop repeating"
  hide_entity: true
  initial_state: false
  trigger:
      platform: time
      seconds: '/3' # every x seconds, 1 second is too short for light to response
  condition:
    condition: state
    entity_id: automation.tts_repeat_signal_on_for_x_seconds
    state: 'off' # if the signal is off
  action:
    - service: automation.turn_off # turn off the repeating TTS
      entity_id: automation.tts_for_take_a_walk_repeating
    - service: automation.turn_off # turn off self
      entity_id: automation.tts_for_take_a_walk_check_signal_to_stop_repeating

# begin : TTS repeat signal on for x seconds
- alias: "TTS repeat signal on for x seconds"
  #hide_entity: true
  initial_state: false
  trigger:
    - platform: time
      minutes: '/10' # turn off signal for x minutes
      seconds: 00
    - platform: state
      entity_id: !secret xiaomi_gateway_light_id
      to: 'off'
  action:
    - service: light.turn_off # turn off the TTS signal
      entity_id: !secret xiaomi_gateway_light_id
    - service: automation.turn_off # turn off self
      entity_id: automation.tts_repeat_signal_on_for_x_seconds
# end : TTS repeat signal on for x seconds

# end: automation for "stop working, take a walk"
################################################################

################################################################
# begin: fill water can before go to school
- alias: "TTS for fill water can: timer rule triggered"
  hide_entity: true
  trigger:
      platform: time
      at: '07:05:00'
  condition:
    condition: time
    weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
  action:
    - service: light.turn_on # turn on the TTS signal
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:15" # left some time for signal on
    - service: automation.turn_on # start rule for turn off signal in next x seconds
      entity_id: automation.tts_repeat_signal_on_for_x_seconds
    - service: automation.turn_on # turn on a timer drived rule
      entity_id: automation.tts_for_fill_water_can_repeating
    - service: automation.turn_on # turn on a timer triggered rule to check the signal
      entity_id: automation.tts_for_fill_water_can_check_signal_to_stop_repeating

- alias: "TTS for fill water can: repeating"
  hide_entity: true
  initial_state: false
  trigger:
      platform: time
      seconds: '/10' # every x seconds, shouldn't too short for the light and TTS to response
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        message: "Hey Dad, remember to fill the water can."
    - delay: "00:00:5" # left some time for tts
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data:
        # message: "Time to take a walk, human!"
        message: "嗨，老爸，记得给水壶里装上水！"
        language: "zh"
    - delay: "00:00:5" # left some time for tts

- alias: "TTS for fill water can: check signal to stop repeating"
  hide_entity: true
  initial_state: false
  trigger:
      platform: time
      seconds: '/3' # every x seconds, 1 second is too short for light to response
  condition:
    condition: state
    entity_id: automation.tts_repeat_signal_on_for_x_seconds
    state: 'off' # if the signal is off
  action:
    - service: automation.turn_off # turn off the repeating TTS
      entity_id: automation.tts_for_fill_water_can_repeating
    - service: automation.turn_off # turn off self
      entity_id: automation.tts_for_fill_water_can_check_signal_to_stop_repeating
# end: fill water can before go to school
################################################################

################################################################
# begin: fade light on in morning
- alias: "Fade light on in working days morning (start)"
  initial_state: false # disable
  hide_entity: true
  trigger:
      platform: time
      at: '06:20:00'
  condition:
    condition: time
    weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
      # - sat
      # - sun
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      #entity_id: light.living_room_light_xiaomi_philips_ball
      data: 
        brightness: 5 # turn on light with minimum brightness
    - service: automation.turn_on # turn on a timer drived rule to increase light
      entity_id: automation.fade_light_on_in_working_days_morning_increasing
    - service: automation.turn_on # turn on a timer drived rule to check for stop
      entity_id: automation.fade_light_on_in_working_days_morning_check_brightness_to_stop

- alias: "Fade light on in working days morning (increasing)"
  initial_state: false
  hide_entity: true
  trigger:
      platform: time
      seconds: '/12' # every x seconds, 1 second is too short for light to response
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      #entity_id: light.living_room_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        # brightness step must >= 5?
        brightness: >
          {% if states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + 5 < 255 %}
            {{states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + 5}}
          {% else %}
            255
          {% endif %}

        # brightness: >
        #   {% if states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + 5 < 255 %}
        #     {{states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + 5}}
        #   {% else %}
        #     255
        #   {% endif %}

- alias: "Fade light on in working days morning (check brightness to stop)"
  initial_state: false
  hide_entity: true
  trigger:
      platform: time
      seconds: '/12'
  condition:
    condition: template
    value_template: '{{ states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness >= 250}}'
    #value_template: '{{ states.light.living_room_light_xiaomi_philips_ball.attributes.brightness >= 250}}'
  action:
    - service: automation.turn_off # stop increasing
      entity_id: automation.fade_light_on_in_working_days_morning_increasing
    - service: automation.turn_off # stop checking
      entity_id: automation.fade_light_on_in_working_days_morning_check_brightness_to_stop
# end: fade light on in morning
################################################################

################################################################
# TTS now time by google home
- alias: "TTS on time: Magic Cube free fall" 
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: free_fall
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data_template:
        message: >
          Time now: {{ now().strftime('%-I:%M %P') }}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_google_home_tts_activated
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_google_home_tts_activated

- alias: "TTS on time volume: Magic Cube rotate"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_google_home_tts_activated
    state: 'active' # speak again if signal is on
  action:
    - service_template: >
        {% if trigger.event.data.action_value > 0 %}
            media_player.volume_up
        {% else %}
            media_player.volume_down
        {% endif %}
      entity_id: !secret current_media_player_id
    - service: timer.cancel # restart timer
      entity_id: timer.flag_google_home_tts_activated
    - service: timer.start
      entity_id: timer.flag_google_home_tts_activated

################################################################

- alias: "Living room light off: Magic Cube"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: flip90
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.living_room_light_xiaomi_philips_ball

- alias: "Living room light on: Magic Cube"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: flip90
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_living_room_light_activated

- alias: "Living room light brightness: Magic Cube rotate"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_living_room_light_activated
    state: 'active' # repeat if signal is on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        # set brightness by rotation value, can not be 0?
        brightness: >
          {% if states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 0 %}
            2
          {% elif states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 255 %}
            {{states.light.living_room_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4}}
          {% else %}
            255
          {% endif %}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_living_room_light_activated
    - service: timer.start
      entity_id: timer.flag_living_room_light_activated

################################################################

- alias: "Small bed room light off: Magic Cube"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: shake_air
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.small_bedroom_light_xiaomi_philips_ball

- alias: "Small bed room light on: Magic Cube"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: shake_air
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_small_bedroom_light_activated

- alias: "Small bed room light brightness: Magic Cube rotate"
  hide_entity: true
  trigger:
    platform: event
    event_type: cube_action
    event_data:
      entity_id: !secret magic_cube_id
      action_type: rotate
  condition:
    condition: state
    entity_id: timer.flag_small_bedroom_light_activated
    state: 'active' # repeat if signal is on
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      data_template: 
        # set brightness by rotation value, only accept int value
        brightness: >
          {% if states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 0 %}
            2
          {% elif states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4 < 255 %}
            {{states.light.small_bedroom_light_xiaomi_philips_ball.attributes.brightness + trigger.event.data.action_value | int * 4}}
          {% else %}
            255
          {% endif %}
    - service: timer.cancel # restart timer
      entity_id: timer.flag_small_bedroom_light_activated
    - service: timer.start
      entity_id: timer.flag_small_bedroom_light_activated

################################################################
# begin: AQI

# begin: "AQI check: Motion Sensor"
- alias: "AQI check: Motion Sensor 0"
  hide_entity: true
  trigger:
    - platform: event
      event_type: motion
      event_data:
        entity_id: !secret motion_sensor_0_id
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.aqi_checker
# end

- alias: "TTS on Air Quality Index"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  action:
    - service: tts.google_say
      entity_id: !secret current_media_player_id
      data_template: 
        message: >
          {% if states.sensor.waqi_zhuhai.state | int >=  300 %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's Brown. It's Hazardous. Everyone should avoid all outdoor exertion.
          {% elif states.sensor.waqi_zhuhai.state | int >=  201 %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's purple. It's Very Unhealthy. Active children and adults, and people with respiratory disease, such as asthma, should avoid all outdoor exertion; everyone else, especially children, should limit outdoor exertion.
          {% elif states.sensor.waqi_zhuhai.state | int >=  151 %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's Red. It's Unhealthy. Active children and adults, and people with respiratory disease, such as asthma, should avoid prolonged outdoor exertion; everyone else, especially children, should limit prolonged outdoor exertion.
          {% elif states.sensor.waqi_zhuhai.state | int >=  101 %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's orange. It's Unhealthy for Sensitive Groups. Active children and adults, and people with respiratory disease, such as asthma, should limit prolonged outdoor exertion.
          {% elif states.sensor.waqi_zhuhai.state | int >=  51 %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's Yellow. It's Moderate. Active children and adults, and people with respiratory disease, such as asthma, should limit prolonged outdoor exertion.
          {% else %}
            Air Quality Index now: {{states.sensor.waqi_zhuhai.state}}. It's Green. It's Good. Have a nice day!
          {% endif %}
    # - delay: '00:00:05' # left some time for tts data transporting
    # - service: tts.google_say
    #   entity_id: !secret current_media_player_id
    #   data_template:
    #     language: "zh" 
    #     message: >
    #       珠海现在的空气质量指数是：{{states.sensor.waqi_zhuhai.state}}


# data_template: 
#   rgb_color: > won't work, got error: 
#   ERROR (MainThread) [homeassistant.core] Invalid service data for light.turn_on: None for dictionary value @ data['rgb_color']. Got '[128, 0, 128]'
# split to several rules
- alias: "Light on Air Quality Index: brown"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    #below: 
    above: 300
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [165,42,42]

- alias: "Light on Air Quality Index: purple"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    below: 301
    above: 200
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [128,0,128]

- alias: "Light on Air Quality Index: red"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    below: 201
    above: 150
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [255,0,0]

- alias: "Light on Air Quality Index: orange"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    below: 151
    above: 100
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [255,20,0]

- alias: "Light on Air Quality Index: yellow"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    below: 101
    above: 50
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [255,140,0]

- alias: "Light on Air Quality Index: green"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  condition:
    condition: numeric_state
    entity_id: sensor.waqi_zhuhai
    below: 51
    #above: 50
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data:
        rgb_color: [0,255,0]

- alias: "Light on Air Quality Index: brightness"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  action:
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
      data_template: 
        brightness: >
          {% if states.sensor.waqi_zhuhai.state | int >=  300 %}
            {{states.sensor.waqi_zhuhai.state | int - 300 + 150}}
          {% elif states.sensor.waqi_zhuhai.state | int >=  201 %}
            {{states.sensor.waqi_zhuhai.state | int - 200 + 150}}
          {% elif states.sensor.waqi_zhuhai.state | int >=  151 %}
            {{states.sensor.waqi_zhuhai.state | int}}
          {% elif states.sensor.waqi_zhuhai.state | int >=  101 %}
            {{states.sensor.waqi_zhuhai.state | int + 150}}
          {% elif states.sensor.waqi_zhuhai.state | int >=  51 %}
            {{states.sensor.waqi_zhuhai.state | int + 150}}
          {% else %}
            {{states.sensor.waqi_zhuhai.state | int + 200}}
          {% endif %}

- alias: "Light on Air Quality Index: blink and turn off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.aqi_checker 
      to: 'on'
    - platform: state
      entity_id: input_boolean.aqi 
      to: 'on'
  action:
    - delay: "00:00:03" # left some time for the light respones the color setting action
    - service: light.turn_off
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_off
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_off
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_off
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_on
      entity_id: !secret xiaomi_gateway_light_id
    - delay: "00:00:01"
    - service: light.turn_off
      entity_id: !secret xiaomi_gateway_light_id
    - service: input_boolean.turn_off
      entity_id: input_boolean.aqi_checker
    - service: input_boolean.turn_off
      entity_id: input_boolean.aqi
  
# begin: All purifiers contrl
- alias: "Turn on all purifiers automation"
  trigger:
    - platform: time
      at: '23:00:00'
  action:
    - service: automation.turn_on
      entity_id: automation.turn_off_all_purifiers_at_night_automatically_when_aqi_green
    - service: automation.turn_on
      entity_id: automation.turn_on_all_purifiers_at_night_automatically_when_aqi_yellow

- alias: "Turn off all purifiers automation"
  trigger:
    - platform: time
      at: '07:00:00'
  action:
    - service: automation.turn_off
      entity_id: automation.turn_off_all_purifiers_at_night_automatically_when_aqi_green
    - service: automation.turn_off
      entity_id: automation.turn_on_all_purifiers_at_night_automatically_when_aqi_yellow

- alias: "Turn on all purifiers at night automatically when AQI Yellow"
  initial_state: false
  #hide_entity: true
  trigger:
    - platform: time
      minutes: '/10' # every 10 minutes
      seconds: 00
  condition:
    - condition: numeric_state
      entity_id: sensor.waqi_zhuhai
      above: 50
    # condition: and # this time condition won't work, don't know why
    # conditions:
    # - condition: numeric_state
    #   entity_id: sensor.waqi_zhuhai
    #   above: 50
    # - condition: time
    #   after: '00:00:00'
    #   before: '07:00:00'   
  action:
    - service: automation.trigger
      entity_id: automation.all_purifiers_control_on

- alias: "Turn off all purifiers at night automatically when AQI Green"
  initial_state: false
  #hide_entity: true
  trigger:
    - platform: time
      minutes: '/10' # every 10 minutes
      seconds: 00
  condition:
    - condition: numeric_state
      entity_id: sensor.waqi_zhuhai
      below: 50
  action:
    - service: automation.trigger
      entity_id: automation.all_purifiers_control_off

- alias: "All purifiers state update: start up on"
  hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: fan.purifier_1
      state: 'on'
    - condition: state
      entity_id: fan.purifier_2
      state: 'on'
    - condition: state
      entity_id: switch.switch_orange
      state: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.all_purifiers

- alias: "All purifiers state update: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: fan.purifier_1
      to: 'on'
    - platform: state
      entity_id: fan.purifier_2
      to: 'on'
    - platform: state
      entity_id: switch.switch_orange
      to: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.all_purifiers

- alias: "All purifiers state update: off"
  hide_entity: true
  trigger: # not very good triggers
    - platform: state
      entity_id: fan.purifier_1
      to: 'off'
    - platform: state
      entity_id: fan.purifier_2
      to: 'off'
    - platform: state
      entity_id: switch.switch_orange 
      to: 'off'
  condition:
    condition: and
    conditions:
    - condition: state
      entity_id: fan.purifier_1
      state: 'off'
    - condition: state
      entity_id: fan.purifier_2
      state: 'off'
    - condition: state
      entity_id: switch.switch_orange
      state: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.all_purifiers

- alias: "All purifiers control: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.all_purifiers 
      to: 'on'
  action:
    - service: fan.turn_on
      entity_id: fan.purifier_1
    - service: fan.turn_on
      entity_id: fan.purifier_2
    - service: switch.turn_on
      entity_id: switch.switch_orange

- alias: "All purifiers control: off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.all_purifiers 
      to: 'off'
  action:
    - service: fan.turn_off
      entity_id: fan.purifier_1
    - service: fan.turn_off
      entity_id: fan.purifier_2
    - service: switch.turn_off
      entity_id: switch.switch_orange
# end: All purifiers contrl

# end: AQI
################################################################

################################################################
# begin: Living room light contrl
- alias: "Living room light state update: start up on"
  hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: light.living_room_light_xiaomi_philips_ball
      state: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.light1

- alias: "Living room light state update: start up off"
  hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: light.living_room_light_xiaomi_philips_ball
      state: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.light1

- alias: "Living room light state update: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: light.living_room_light_xiaomi_philips_ball 
      to: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.light1

- alias: "Living room light state update: off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: light.living_room_light_xiaomi_philips_ball 
      to: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.light1

- alias: "Living room light control: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.light1 
      to: 'on'
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball

- alias: "Living room light control: off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.light1 
      to: 'off'
  action:
    - service: light.turn_off
      entity_id: light.living_room_light_xiaomi_philips_ball

# begin: "Living room light on/off: Wireless button"
- alias: "Living room light on: Wireless Button"
  hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_1_id
      click_type: single
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.living_room_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_small_bedroom_light_activated

- alias: "Living room light off: Wireless Button"
  hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_1_id
      click_type: single
  condition:
    condition: state
    entity_id: light.living_room_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.living_room_light_xiaomi_philips_ball
# end: "Living room light on/off: Wireless button"

# end: Living room light contrl
################################################################

################################################################
# begin: Small bedlight contrl
- alias: "Small bedroom light state update: start up on"
  hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      state: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.light2

- alias: "Small bedroom light state update: start up off"
  hide_entity: true
  trigger:
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      state: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.light2

- alias: "Small bedroom light state update: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
      to: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.light2

- alias: "Small bedroom light state update: off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: light.small_bedroom_light_xiaomi_philips_ball 
      to: 'off'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.light2

- alias: "Small bedroom light control: on"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.light2 
      to: 'on'
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball

- alias: "Small bedroom light control: off"
  hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.light2 
      to: 'off'
  action:
    - service: light.turn_off
      entity_id: light.small_bedroom_light_xiaomi_philips_ball

# begin: "Small bedroom light on/off: Motion Sensor"
- alias: "Small bedroom light on: Motion Sensor"
  hide_entity: true
  trigger:
    - platform: event
      event_type: motion
      event_data:
        entity_id: !secret motion_sensor_2_id
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'off' # if off then on
  action:
    - service: light.turn_on
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
    - service: timer.start # an X seconds timer, as a signal for next action: rotate
      entity_id: timer.flag_small_bedroom_light_activated

- alias: "Small bedroom light off: Motion Sensor"
  hide_entity: true
  trigger:
    - platform: event
      event_type: motion
      event_data:
        entity_id: !secret motion_sensor_2_id
  condition:
    condition: state
    entity_id: light.small_bedroom_light_xiaomi_philips_ball
    state: 'on' # if on then off
  action:
    - service: light.turn_off
      entity_id: light.small_bedroom_light_xiaomi_philips_ball
# end: "Small bedroom light on/off: Motion Sensor"

# end: Small bedroom light contrl
################################################################

################################################################
# begin: restart hass
- alias: "Restart hass: trigger set flag up by button"
  #hide_entity: true
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: !secret wireless_button_2_id
      click_type: double
  action:
    - service: shell_command.set_restart_hass_flag
# end: restart hass
################################################################

################################################################
# test begin

- alias: "test on ON"
  #hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.test
      to: 'on'
  action:
    #- service: shell_command.set_restart_hass_flag
    # - service: tts.google_say
    #   entity_id: !secret current_media_player_id
    #   data:
    #     message: "A start work timer started!"
    - service: xiaomi_aqara.play_ringtone
      data:
        gw_mac: !secret xiaomi_gateway_mac
        ringtone_id: 8
        ringtone_vol: 8

- alias: "test on OFF"
  #hide_entity: true
  trigger:
    - platform: state
      entity_id: input_boolean.test
      to: 'off'
  action:
    - service: input_number.increment
      entity_id: input_number.start_work_timer

    # - service: xiaomi_aqara.stop_ringtone
    #   data:
    #     gw_mac: !secret xiaomi_gateway_mac

# - alias: "test on sensor turn bool on"
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.motion_sensor_158d0001db5021
#       to: 'on'
#   condition:
#     condition: state
#     entity_id: input_boolean.test
#     state: 'off'
#   action:
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.test
#     # - service: xiaomi_aqara.play_ringtone
#     #   data:
#     #     gw_mac: !secret xiaomi_gateway_mac
#     #     ringtone_id: 8
#     #     ringtone_vol: 3

# - alias: "test on sensor turn bool off"
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.motion_sensor_158d0001db5021
#       to: 'on'
#   condition:
#     condition: state
#     entity_id: input_boolean.test
#     state: 'on'
#   action:
#     - service: input_boolean.turn_off
#       entity_id: input_boolean.test
    # - service: xiaomi_aqara.stop_ringtone
    #   data:
    #     gw_mac: !secret xiaomi_gateway_mac
# test end
################################################################

